// Auto-generated by Genkit
'use server';
/**
 * @fileOverview A flow for auto-completing Ansible module parameters.
 *
 * - autoCompleteParameters - A function that handles the auto-completion of Ansible module parameters.
 * - AutoCompleteParametersInput - The input type for the autoCompleteParameters function.
 * - AutoCompleteParametersOutput - The return type for the autoCompleteParameters function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AutoCompleteParametersInputSchema = z.object({
  moduleName: z.string().describe('The name of the Ansible module.'),
  context: z.string().describe('The context of the playbook, including existing tasks and variables.'),
});
export type AutoCompleteParametersInput = z.infer<typeof AutoCompleteParametersInputSchema>;

const AutoCompleteParametersOutputSchema = z.object({
  parameters: z.record(z.any()).describe('A map of parameter names to suggested values and descriptions.'),
});
export type AutoCompleteParametersOutput = z.infer<typeof AutoCompleteParametersOutputSchema>;

export async function autoCompleteParameters(input: AutoCompleteParametersInput): Promise<AutoCompleteParametersOutput> {
  return autoCompleteParametersFlow(input);
}

const prompt = ai.definePrompt({
  name: 'autoCompleteParametersPrompt',
  input: {schema: AutoCompleteParametersInputSchema},
  output: {schema: AutoCompleteParametersOutputSchema},
  prompt: `You are an AI assistant that suggests parameters for Ansible modules based on the module name and playbook context.

  Given the following Ansible module name and playbook context, suggest parameters that would be useful to include in the module configuration. Provide a brief description of each parameter's purpose and any common/suggested values.

  Module Name: {{{moduleName}}}
  Context: {{{context}}}

  Format your response as a JSON object where the keys are the parameter names, and the values are objects containing "description" and "suggestedValues" (array of strings) fields.
  `,
});

const autoCompleteParametersFlow = ai.defineFlow(
  {
    name: 'autoCompleteParametersFlow',
    inputSchema: AutoCompleteParametersInputSchema,
    outputSchema: AutoCompleteParametersOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
